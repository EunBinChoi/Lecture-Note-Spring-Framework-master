[ 테스트 ]
1) 단위 테스트 (Unit Test)
	: 테스트 할 수 있는 가장 작은 단위 (클래스나 메소드 단위)
	: 가능하면 테스트 단위를 작게 설정해서 테스트가 간단하고 디버깅 쉽게 하는 것이 좋음
	
2) 통합 테스트 (Integration Test)
	: 여러 모듈 (외부 api, lib)을 모아서 의도적으로 코드가 협력이 되는지 확인
	: 통합 테스트는 개발자가 변경할 수 없는 부분 테스트하는 용도
	: ex) DB 접근하거나 전체 코드/환경들이 제대로 작동하는지 확인
	: 장점: 단위 테스트에서 발견하기 힘든 버그 확인
	: ex) 개발 코드가 돌아가는 환경 (CPU 싱글 코어 -> 더블 코어)에 대한 버그
	: 단점: 단위 테스트보다 더 많은 코드를 테스트하기 때문에 신뢰성 떨어질 수 있음
	:      어디 부분에서 에러가 발생했는지 확인하기 쉽지 않음
	
3) 인수 테스트 (Acceptance Test)
	: 사용자 스토리 (시나리오)에 맞춰 수행하는 테스트
	: 비지니스 쪽에 초점을 둠
	: 보통 개발 요구서에 작성이 되어 있음
	: ex) 프로젝트에 참여하는 사람들 (기획자, 클라이언트, 개발자 등)이 시나리오를 작성
		  개발자는 이에 의거해서 테스트를 만듦

[ JUnit ]
: 단위 테스트 도구

@Test: 테스트를 수행하는 메소드 지정
@Before/After: 하나의 테스트마다 전, 후로 실행되는 메소드 지정
@BeforeClass/AfterClass: 각각의 테스트 메소드가 아닌 클래스에서 한번만 실행되는 메소드 지정
@Ignore: 테스트를 수행하지 않도록 함 (사용하는 것을 자제)

[ Spring-Test ]
: 통합 테스트
: jUnit의 기능을 확장해서 이용

@RunWith(SpringJUnit4ClassRunner.class): jUnit으로 Spring-Test 수행
@ContextConfiguration(): ApplicationContext (환경)을 조성하기 위함
	 - locations/values = { "applicationContext1.xml", "applicationContext2.xml" ... }
	 - classes = { AppConfig1.class, AppConfig2.class .... }

	 
[ 단위 테스트 활용 방법 ]
- 단위 테스트 안에서는 아무것도 출력하면 안됨
- 단위 테스트는 반환값이 void여야 하고, static 메소드면 안됨
- 테스트를 위한 코드 (src/test/java)는 제품 코드 (src/main/java)에서 분리되어야 함
- 단위 테스트 케이스의 이름은 명확하고 일관되게 만듦 (테스트의 의도가 무엇인지 알기 위함)
	- ex) TestCreateMember_NullId_ShouldThrowException
		  TestCreateMember_DuplicateId_ShouldThrowException
- 단위 테스트는 버그를 찾기 위한 용도는 아님
	- 좀 더 프로그램을 명확하게 짜기 위한 용도
	- 단위 테스트는 시스템의 각 단위들을 개별적으로 조사
- 각 단위 테스트는 독립적이어야 함
	- 다른 테스트에 의존적인 꼬리에 꼬리를 무는 단위 테스트는 작성하지 말아야 함
	- 이러한 테스트들은 테스트의 근본적인 이유를 알기 어려움
	- 상호 의존적인 테스트 코드는 유지보수하기도 힘듦
- 외부 시스템이나 서비스에 대한 의존성이 낮은 메소드들부터 먼저 테스트를 작성하고 확장해야 함
	- service <- dao
	- dao 테스트코드 -> service 테스트 코드
- 하나의 테스트 케이스는 단위 기능 중 하나의 시나리오만 테스트 해야 함
	- 하나의 테스트 케이스가 여러 개의 시나리오를 테스트하면 
	  하나의 테스트 케이스가 어떤 시나리오를 망가뜨리는 지 확인이 어려움
- 불필요한 테스트 케이스 / 테스트 함수는 작성할 필요가 없음
	- 단순히 단위 내의 코드를 행하는 모든 것을 관찰하기 위한 용도가 아님
	- 시스템 내의 특정 단위가 어떻게 동작하는 지에 대한 설계 디자인 스펙임 (**)
